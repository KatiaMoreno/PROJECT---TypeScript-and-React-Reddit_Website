{"version":3,"sources":["serviceWorker.ts","components/listview/listview.tsx","pages/links.tsx","components/carousel/carousel.tsx","pages/cats.tsx","pages/login.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Listview","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","items","length","react_default","a","createElement","map","item","React","Component","Links","_this","call","state","links","_this2","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","getData","sent","setState","stop","react","listview_Listview","type","checked","completed","title","_callee2","response","json","_context2","fetch","abrupt","Carousel","startInIndex","Error","currentPicIndex","onClick","_goLeft","_goRight","Cats","imgStyle","width","height","carousel_Carousel","indexItem","style","src","credentialSchema","email","joi","required","password","min","max","Login","_renderErrors","placeholder","onKeyUp","e","_updateEmail","target","_updatePassword","_handleSubmit","validationResult","error","details","d","message","_this3","getToken","method","headers","Content-Type","token","ReactDOM","render","BrowserRouter","backgroundColor","Link","color","to","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ede4ea19.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\ninterface ListviewProps {\r\n    items: JSX.Element[];\r\n}\r\n\r\ninterface ListviewState {\r\n    //\r\n}\r\n\r\nexport class Listview extends React.Component<ListviewProps, ListviewState> {\r\n    public render() {\r\n        if (this.props.items.length < 1) {\r\n            return <div>There is no items!</div>;\r\n        } else {\r\n            return <ul>\r\n                {this.props.items.map(function (item) {\r\n                    return <li>{item}</li>;\r\n                })}\r\n            </ul>;\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Listview } from \"../components/listview/listview\";\r\n\r\ninterface LinksItem {\r\n    userId: number;\r\n    id: number;\r\n    title: string;\r\n    completed: boolean;\r\n}\r\n\r\ninterface LinkssProps {\r\n    //\r\n}\r\n\r\ninterface LinkssState {\r\n    links: LinksItem[] | null;\r\n}\r\n\r\nexport class Links extends React.Component<LinkssProps, LinkssState> {\r\n    public constructor(props: LinkssProps) {\r\n        super(props);\r\n        this.state = {\r\n            links: null\r\n        };\r\n    }\r\n    public componentDidMount() {\r\n        (async () => {\r\n            const data = await getData();\r\n            this.setState({ links: data });\r\n        })();\r\n    }\r\n    public render() {\r\n        if (this.state.links === null) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return <Listview\r\n                items={\r\n                    this.state.links.map((links) => {\r\n                        return <div>\r\n                            <input type=\"checkbox\" checked={links.completed} />\r\n                            {links.title}\r\n                        </div>;\r\n                    })\r\n                }\r\n            />;\r\n        }\r\n    }\r\n}\r\n\r\nasync function getData() {\r\n    const response = await fetch(\"/api/v1/links/\");\r\n    const json = await response.json();\r\n    return json as LinksItem[];\r\n}","import React from 'react';\r\n\r\ninterface CarouselProps {\r\n    items: JSX.Element[];\r\n    startInIndex: number;\r\n}\r\n\r\ninterface CarouselState {\r\n    currentPicIndex: number;\r\n}\r\n\r\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\r\n    public constructor(props: CarouselProps) {\r\n        super(props);\r\n        if (\r\n            props.startInIndex > this.props.items.length - 1 ||\r\n            props.startInIndex < 0\r\n        ) {\r\n            throw new Error(\"invalid startInIndex!\");\r\n        }\r\n        this.state = {\r\n            currentPicIndex: props.startInIndex\r\n        };\r\n    }\r\n    public render() {\r\n        return <div>\r\n            <button onClick={() => this._goLeft()}>Go left</button>\r\n            {this.props.items[this.state.currentPicIndex]}\r\n            <button onClick={() => this._goRight()}>Go right</button>\r\n        </div>;\r\n    }\r\n    private _goLeft() {\r\n        if (this.state.currentPicIndex === 0) {\r\n            this.setState({ currentPicIndex: this.props.items.length - 1 });\r\n        } else {\r\n            this.setState({ currentPicIndex: this.state.currentPicIndex - 1 });\r\n        }\r\n    }\r\n    private _goRight() {\r\n        if (this.state.currentPicIndex === this.props.items.length - 1) {\r\n            this.setState({ currentPicIndex: 0 });\r\n        } else {\r\n            this.setState({ currentPicIndex: this.state.currentPicIndex + 1 });\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Carousel } from '../components/carousel/carousel';\r\n\r\ninterface CatsProps {\r\n    //\r\n}\r\n\r\ninterface CatsState {\r\n    items: string[] | null;\r\n}\r\n\r\nexport class Cats extends React.Component<CatsProps, CatsState> {\r\n    public constructor(props: CatsProps) {\r\n        super(props);\r\n        this.state = {\r\n            items: null\r\n        };\r\n    }\r\n    public componentDidMount() {\r\n        (async () => {\r\n            const data = await getData();\r\n            this.setState({ items: data });\r\n        })();\r\n    }\r\n    public render() {\r\n        const imgStyle: React.CSSProperties = { width: \"100px\", height: \"100px\" };\r\n        if (this.state.items === null) {\r\n            return <div>Loading....</div>;\r\n        } else {\r\n            return (\r\n                <Carousel\r\n                    items={\r\n                        this.state.items.map((item, indexItem) => {\r\n                            return (\r\n                                <img style={imgStyle} src={item} />\r\n                            );\r\n                        })\r\n                    }\r\n                    startInIndex={0}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nasync function getData() {\r\n    const response = await fetch(\"/data/cats.json\");\r\n    const json = await response.json();\r\n    return json;\r\n}","import * as React from \"react\";\r\nimport * as joi from \"joi\";\r\n\r\nconst credentialSchema = {\r\n    email: joi.string().email().required(),\r\n    password: joi.string().min(3).max(30).required()\r\n};\r\n\r\ninterface LoginProps {}\r\n\r\ninterface LoginState {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nexport class Login extends React.Component<LoginProps, LoginState> {\r\n    public constructor(props: LoginProps) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n    public render() {\r\n        return (\r\n            <div>\r\n                {this._renderErrors()}\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    onKeyUp={(e) => this._updateEmail((e as any).target.value)}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onKeyUp={(e) => this._updatePassword((e as any).target.value)}\r\n                />\r\n                <button onClick={() => this._handleSubmit()}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n    // Display errors or OK on screen\r\n    private _renderErrors() {\r\n        const validationResult = joi.validate({\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }, credentialSchema);\r\n        if (validationResult.error) {\r\n            return <div>\r\n                {validationResult.error.details.map(d => <div>{d.message}</div>)}\r\n            </div>;\r\n        } else {\r\n            return <div>OK!</div>;\r\n        }\r\n    }\r\n    // Update the state (email) on keyup\r\n    private _updateEmail(email: string) {\r\n        this.setState({ email: email });\r\n    }\r\n    // Update the state (password) on keyup\r\n    private _updatePassword(password: string) {\r\n        this.setState({ password: password });\r\n    }\r\n    // Send HTTP request on click\r\n    private _handleSubmit() {\r\n        (async () => {\r\n            await getToken(this.state.email, this.state.password);\r\n        })();\r\n    }\r\n}\r\n\r\n//\r\nasync function getToken(email: string, password: string) {\r\n    const data = {\r\n        email: email,\r\n        password: password\r\n    };\r\n    const response = await fetch(\r\n        \"/data/login.json\",\r\n        {\r\n            method: \"GET\", // in a real example should be POST\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            // in a real example the data is send in the request body\r\n            // body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const json = await response.json();\r\n    // JSON should look like { token: \"fijwe4iprwri239049034ucfij3490jiwf03480hfr45h40\" }\r\n    return json.token;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { Links } from \"./pages/links\";\nimport { Cats } from './pages/cats';\nimport { Login } from './pages/login';\n\nconst headerStyle: React.CSSProperties = {\n    backgroundColor: \"#333333\",\n    height: \"100px\"\n};\n\nReactDOM.render(\n    // This is the router component\n    <BrowserRouter>\n        {\n            /*\n                This is how you do a comment in JSX!\n            */\n        }\n        <div>\n            <div style={headerStyle}>\n                {\n                    /*\n                        Links are rendered as HTML <a/> elements and\n                        can be used to navigate from a page to another\n                    */\n                }\n                <Link style={{ color: \"#ffffff\" }} to=\"/cats\">Cats</Link>\n                <Link style={{ color: \"#ffffff\" }} to=\"/\">Links</Link>\n                <Link style={{ color: \"#ffffff\" }} to=\"/login\">Login</Link>\n            </div>\n            {\n                /*\n                    The Switch component will render one of the components\n                    The rendered component will be the one in the Route with\n                    the matching path\n                */\n            }\n            <Switch>\n                {\n                    /*\n                        The Route component can be used to declare the \n                        pages in our single page web application\n                    */\n                }\n                <Route exact path=\"/\" component={Links} />\n                <Route exact path=\"/cats\" component={Cats} />\n                <Route exact path=\"/login\" component={Login} />\n            </Switch>\n            <div>Footer!</div>\n        </div>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}